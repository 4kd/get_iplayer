#!/usr/bin/perl
#
# Lists and downloads BBC iplayer mp4 streams
#
use strict;
use URI;
use IO::Socket;

my $download = join ',', @ARGV;
my $download_dir = "$ENV{HOME}/nfs/video/TV/iplayer";
#my $proxy_url = $ENV{HTTP_PROXY} || $ENV{http_proxy} || 'http://localhost:13128';
my $proxy_url = $ENV{HTTP_PROXY} || $ENV{http_proxy} || '';
my $days = 7;

my $url_download_prefix = 'http://www.bbc.co.uk/mediaselector/3/auth/iplayer_streaming_http_mp4';
my %ua = (
  coremedia => "Apple iPhone v1.1.1 CoreMedia v1.0.0.3A110a",
  safari => "Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/3A110a Safari/419.3",
);

my (%links, %daymonth, %slot, %filenames, %urls, %streams, %prog_index, %pids);
my $now = time();
my $cachefile = '/tmp/iplayer.cache';
my $cache_secs = 86000;
my ( $videourl, $video_id, $cookie, $title, $full, @vers, $prev_url );


# Assume the argv is a regex statement if it doesnt contain just numbers/commas
my $download_regex;
if ($download !~ /^[\d,]+$/) {
	$download_regex = $ARGV[0];
}

# Set web proxy env var if required
$ENV{HTTP_PROXY} = $proxy_url if $proxy_url;
$ENV{http_proxy} = $proxy_url if $proxy_url;

# Get straem links from BBC iplayer site or from cache
get_links();

# Print list of streams
my $count = 1;
for (sort keys %links) {
#	print "$count: $_ $daymonth{$_} $slot{$_} = $links{$_}\n";
	print "$count: $_ $daymonth{$_} $slot{$_}\n" if ! $download;
	$streams{$count} = $links{$_};
	$prog_index{$_} = $count;
	# Munge program name to create a filename
	$filenames{$links{$_}} = "$_";
	$filenames{$links{$_}} =~ s/\s/_/g;
	$filenames{$links{$_}} =~ s/[\(\)']//g;
	$filenames{$links{$_}} =~ s/\//-/g;
	$count++;
}

# Generate ugly html index
gen_html("iplayer.html");
#gen_fxd_categorised("iplayer.fxd");

# Get matching programmes
if ($download_regex) {
	$download = '';
	my @matches = sort grep /$download_regex/, keys %links;
	print "Download Matches:\n";
	for (@matches) {
		print "$prog_index{$_}: $_ $daymonth{$_} $slot{$_}\n";
		$download .= "$prog_index{$_},";
	}
}

# Do the downloads
if ($download) {
	my @dl = split /[\s,]+/, $download;
	for (@dl) {
		chomp();
		# Reset globals between dloads
		$videourl = $video_id =	$cookie = $title = $full = $prev_url = '';
		@vers = ();
		download_stream( $streams{$_} );
	} 
}

exit 0;


sub get_links_for_date {
	my ($day, $month, $slot) = @_;
	my $pageno = 1;
	my $pid;
	my @page;
	print "Results for $day / $month / $slot:";
	# Loop while we still get stream links
	do {
		print ".";
		chomp( @page = grep /version_pid=\w+">[^<]+<\/a>/, `curl $proxy_url -A "$ua{safari}" "http://www.bbc.co.uk/iplayer/last7days/?filter=txdate%3A${day}-${month}&filter=txslot%3A${slot}&start=${pageno}&scope=iplayerlast7days" 2>/dev/null` );

		# Get the complete URL
		# e.g.:  <a class="resultlink" href="/iplayer/page/item/b009gn1m.shtml?filter=txdate%3A13-03&amp;filter=txslot%3Aafternoon&amp;start=1&amp;scope=iplayerlast7days&amp;version_pid=b009gmpz">In The Night Garden</a>
		# We just need this in the form of /iplayer/page/item/b009gn1m.shtml|<progname>
		s/^.*href=\"(.*\.shtml)\?.*version_pid=\w+">([^<]+)<\/a>/$1|$2/g for @page;

		for (@page) {
			my ($url, $progname) = split /\|/;
			#$url = $url_download_prefix.$url;
			# Get the pid for duplicate detection
			$pid = $url;
			$pid =~ s/^.*\/(\w+)\.shtml/$1/g;
			# Duplicate detection
			if ( not defined $pids{$pid} ) {
				$links{"$progname ($day/$month)"} = $url;
				# Other hashes for categorisation
				$daymonth{"$progname ($day/$month)"} = $day."/".$month;
				$slot{"$progname ($day/$month)"} = $slot;
				# Used to detect duplicates
				$urls{$url} = "$progname ($day/$month)";
				$pids{$pid} = "$progname/$day/$month/$slot";
				# Link Validation here...
			} else {
				print "WARNING: removing duplicate stream link for \"$progname ($day/$month)\" PID=$pid / $pids{$pid}\n";
			}

		}
		# Next page
		$pageno++;
	} while ($#page >= 0);
	print "\n";
}


sub get_links {
	my @cache;

	# Open cache file (need to verify we can even read this)
	if ( open(CACHE, "< $cachefile") ) {
		@cache = <CACHE>;
		close (CACHE);
	}

	# if a cache file doesn't exist/corrupted or original file is older than 2 mins then download new data
	if ( ($cache[0] =~ /^0$/) || (! -f $cachefile) || ($now >= ((stat($cachefile))[9] + $cache_secs)) ) {

		# Get last $days of listings
		for (my $i=$days; $i>=0; $i--) {
			chomp( my ($d, $m) = split /\s+/, `date +'%d %m' -d "$i days ago"` );
			for my $s qw(morning afternoon evening) {
				get_links_for_date($d,$m,$s);
			}
		}

		# Open cache file for writing
		if ( open(CACHE, "> $cachefile") ) {
			for (sort keys %links) {
				print CACHE "$_|$links{$_}|$daymonth{$_}|$slot{$_}\n";
			}
			close (CACHE);
			# Make sure anyone can read/write file
			`chmod 777 $cachefile`;
		} else {
			print "Couldn't open cache file for writing\n";
		}

	# Else read from cache
	} else {
		for (@cache) {
			# Populate %links from cache
			chomp();
			my ($progname, $url, $dm, $s) = split /\|/;
                        $links{$progname} = $url;
			$daymonth{$progname} = $dm;
			$slot{$progname} = $s;
			$urls{$url} = $progname;
		}
	}

	return 0;
}


sub gen_html() {
	my $webfile = shift;
	if ( open(HTML, "> $webfile") ) {
		print HTML '<html><head></head><body>';
		for (sort keys %links) {
			print HTML "<a href=\"$links{$_}\">$prog_index{$_} : $_ $daymonth{$_} $slot{$_}</a><br>\n";
		}
		print HTML '</body>';
		close (HTML);
	} else {
		print "Couldn't open html file $webfile for writing\n";
	}
}


sub gen_fxd() {
	my $fxdfile = shift;
	if ( open(HTML, "> $fxdfile") ) {
		print HTML '<?xml version="1.0" ?><freevo>';
		for (sort keys %links) {
			print HTML "<movie title=\"$_\"><video><url id=\"p1\">$links{$_}<playlist/></url></video><info><description>$_</description></info></movie>\n";
		}
		print HTML '</freevo>';
		close (HTML);
	} else {
		print "Couldn't open fxd file $fxdfile for writing\n";
	}
}


sub gen_fxd_categorised() {
	my $fxdfile = shift;
	if ( open(HTML, "> $fxdfile") ) {
		print HTML '<?xml version="1.0" ?>'."\n<freevo>\n";

		# Get last $days of listings
		for (my $i=$days; $i>=0; $i--) {
			chomp( my ($d, $m) = split /\s+/, `date +'%d %m' -d "$i days ago"` );
			print HTML "\t<container title=\"$d\/$m\" type=\"video\">\n";
			for (sort keys %links) {
				if ( $daymonth{$_} =~ /^$d\/$m$/ ) {
					print HTML "\t\t<movie title=\"$_ $slot{$_}\"><video><url id=\"p1\">$links{$_}<playlist/></url></video><info><description>$_ $slot{$_}</description></info></movie>\n";
				}
			}
			print HTML "\t</container>\n";
		}
		print HTML '</freevo>';
		close (HTML);
	} else {
		print "Couldn't open fxd file $fxdfile for writing\n";
	}
}


# Usage: download_stream (<pid>|<url>)

sub download_stream {

	my $id = shift;
	$id = $1 if $id =~ /\/(b.*?)\.shtml/;
	my $page = "http://www.bbc.co.uk/iplayer/page/item/$id.shtml";

	my $sock = iphone_req($page, "safari", "");
	
	while(<$sock>) {
	  print if $ENV{DEBUG};
	  
	  if(/Location: (.*)/) {
	    $videourl = $1;
	    $sock = iphone_req($1, "coremedia", "Range: bytes=0-1\r\n");
	  } elsif(/Set-Cookie: (BBC-UID.*?);/i) {
	    $cookie = $1;

	    my $text = join "", <$sock>; # keepalive causes a pause here

	    @vers = ($text =~ /iplayer.versions.*?Original.*?'(\w+)/s);
	    push @vers, $text =~ /iplayer.versions(?:.*?pid\s*:\s*'(\w+)')+/sg;

	    if(@vers) {
	      $video_id = shift @vers;

	      if($text =~ m!<p class="heading">([^<]+)</p>(?:.*?<h2>(.*?)</h2>)?!s) {
	        $title = "$1" . ($2 ? " - $2" : "");
	        $title =~ s/[^-A-Z0-9 ']/ /ig;
	        $title =~ s/(?:^\s+|\s+$)//g;
	        $title =~ s/\s{2,}/ /g;
	      } else {
	        $title = $video_id;
	      }

	      $sock = iphone_req("$url_download_prefix/$video_id?" . int(rand 1e6) . "%20", "coremedia", "Range: bytes=0-1\r\n");
	    } else {
	      print "ERROR: video id not found\n";
	      return 1;
	    }
	  } elsif(!$full && /^Content-Range: .*\/(\d+)\r?$/) {
	    $full = $1;
	    $sock = iphone_req($videourl, "coremedia", "Range: bytes=0-$1\r\n");
	  } elsif(/^\r?$/) {
	    if(!$full) {
	      if(@vers) { # try another version (maybe signed still available?)
	        $video_id = shift @vers;
	        $sock = iphone_req("$url_download_prefix/$video_id?" . int(rand 1e6) . "%20", "coremedia", "Range: bytes=0-1\r\n");
	      } else {
	        print  "ERROR: Didn't find anything to download!\n";
                return 2;
  	      }
	    } else {
	      save_to_file($sock, $full);
	      return 0;
	    }
	  }
	}
	return 0;
}


sub iphone_req {
  my($url, $ua, $add) = @_;
  my $type = $prev_url ? "new_abs" : "new";
  $url = URI->$type($url, $prev_url) unless ref $url;
  $prev_url = $url;

  my $path = $url->path . ($url->query ? "?" . $url->query : "");
  my $host = $url->host;

  print "--> $path\n";

  my $req = <<EOF;
GET $path HTTP/1.1\r
Accept: */*\r
Accept-Language: en\r
Accept-Encoding: gzip, deflate\r
Cookie: $cookie\r
User-Agent: $ua{$ua}\r
Connection: keep-alive\r
${add}Host: $host\r
\r
EOF
  my $sock = IO::Socket::INET->new("$host:80") or die $!;
  print $sock $req;
  return $sock;
}


sub save_to_file {
  my($sock, $full) = @_;

  my $file = "$download_dir/$title.mp4";
  if ( -f $file ) {
  	print "ERROR: File already exists - skipping....\n";
		return 0;
  }
  printf "\nSaving to $file (%0.1fMB)\n", $full/(1<<20);

  open my $fh, ">$file" or die $!;
  binmode $fh;
  binmode $sock;
  my $buf;
  my($s,$p);

  $|++;
  my $start = time;
  while($s=read $sock, $buf, 1<<16) {
    $p+=$s;
    printf "\r%0.2f%% (%0.2f KiB/s)",
			($p/$full) * 100, $p / ((time - $start) || 1) / 1024;
    print $fh $buf or die "HMM!";
  }
  print "\n";
  return 0;
}
