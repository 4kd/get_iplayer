#!/usr/bin/perl
#
# get_iplayer
#
# Lists and downloads BBC iplayer mov streams
#
# Author: P Lewis
# Email: iplayer (at sign) linuxcentre.net
# License: GPLv3 (see LICENSE.txt)
# Date: March 12th 2008
#
# Supports: 
# * Downloading Mov streams from BBC Iplayer site - 20080312
# * XOR decoding of downloaded files - 20080609
# * Indexing of all available (i.e. listed) Iplayer programs (now uses A-Z index page with search set to '*') - 20080609
# * Caching of Index (default 24hrs)
# * Creation of a basic html index file
# * De-duplication of programme index
# * HTTP Proxy support (now using curl for all downloads - yes - ugly shell invokation for now) - 20080609
# * Regex search on programme name capability (makes it useful to run this from crontab)
# * Tested on Linux (Fedora6/7/8/9)
#
# Requires:
# * curl
# * perl 5.8

use strict;
use URI;
use IO::Socket;
use vars qw($opt_t $opt_d $opt_f $opt_o $opt_p $opt_e $opt_l $opt_n $opt_v $opt_w);
use Getopt::Std;
use Fcntl;
use File::stat;
use IO::Seekable;
my $DEBUG = 0;

# Parse options
if (! getopts("twnvdfo:p:e:l")) {
        print "Usage: get_iplayer [-l] [-t] [-e <cache expiry secs>] [-f] [-o <output dir>] [-p <proxy_url>] -- <regex|index|pid>\n";
        print "       -l          show/search long programme descriptions\n";
        print "       -t          test only - no download\n";
        print "       -f          flush cache\n";
        print "       -e <secs>   cache expiry in seconds\n";
        print "       -o <dir>    Download output directory\n";
        print "       -p <url>    Web proxy URL spec (only used for parsing iplayer site - not downloads)\n";
        print "       -n          Do not perform XOR decoding\n";
        print "       -d <file>   Perform XOR decoding on specified existing file\n";
        print "       -w          keep whitespace in filenames\n";
        print "       -v          verbose\n";
        exit 1;
}

# XOR Decode-only mode
if ($opt_d) {
	for my $file (@ARGV) {
		if ( -f $file ) {
			iplayer_decoder($file);
		} else {
			print "ERROR: Cannot find $file\n";
		}
	}
	exit 0;
}

# Put remaining non-option cmdline into $download
my $download = join ',', @ARGV;
my $download_dir = $opt_o || "$ENV{HOME}/nfs/video/TV/iplayer";
# Check for valid dload dir
if (! -d $download_dir ) {
  die ("ERROR: $download_dir does not exist\n");
}

# Web proxy
my $proxy_url = $opt_p || $ENV{HTTP_PROXY} || $ENV{http_proxy} || '';
print "INFO: Using Proxy $proxy_url\n" if $proxy_url;
my $curl = "curl";
$curl .= ' -#' if ! $opt_v;
$curl .= ' -v' if $DEBUG;
$curl .= " -x $proxy_url" if $proxy_url;
# Set web proxy env vars
$ENV{HTTP_PROXY} = $proxy_url if $proxy_url;
$ENV{http_proxy} = $proxy_url if $proxy_url;

my $url_download_prefix = 'http://www.bbc.co.uk/mediaselector/3/auth/iplayer_streaming_http_mp4';
my $prog_page_prefix = 'http://www.bbc.co.uk/programmes';
my %ua = (
  coremedia => "Apple iPhone v1.1.1 CoreMedia v1.0.0.3A110a",
  safari => "Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/3A110a Safari/419.3",
);

my (%links, %urls, %streams, %prog_index, %pids, %episodes, %descriptions);
my $now = time();
my $cachefile = '/tmp/iplayer.cache';
my $webfile = $download_dir.'/index.html';
my $cache_secs = $opt_e || 86000;

# Flush cache if required
unlink ($cachefile) if $opt_f;

# Assume the argv is a regex statement if it doesn't contain just numbers/commas
# See if a URL/URI containing a PID is specified e.g. b0??????
my $download_regex;
if ($download && $download !~ /^[\d,]+$/) {
    $download_regex = $ARGV[0];
    # if we have a pid...
    if ($download =~ /^.*b0[a-z,0-9]{6}.*$/) {
      $download_regex =~ s/^.*(b0[a-z,0-9]{6}).*$/$1/g;
    }
    print "Seaching for programme names containing: '$download_regex'\n";
}


# Get stream links from BBC iplayer site or from cache
get_links();

# Print list of streams
my $count = 1;
for (sort keys %links) {
        my $desc = "- $descriptions{$_}" if $opt_l;
	print "$count: $_ - $episodes{$_} $desc\n" if ! $download;
	$streams{$count} = $links{$_};
	$prog_index{$_} = $count;
	$count++;
}

# Get matching programmes
if ($download_regex) {
	$download = '';
	my @matches;

	# Search prognames and episode name
	push @matches, sort grep /$download_regex/i, keys %links;

	# Also search long descriptions if -l is specified
	if ($opt_l) {
		for (keys %links) {
			if ( $descriptions{$_} =~ /$download_regex/i ) {
				push @matches, $_;
			}
		}
	}

	print "Download Matches:\n";
	for (@matches) {
	        my $desc = "- $descriptions{$_}" if $opt_l;
		print "$prog_index{$_}: $_ - $episodes{$_} $desc\n";
		$download .= "$prog_index{$_},";
	}
}

# Do the downloads
if ($download) {
	my @dl = split /[\s,]+/, $download;
	for (@dl) {
		chomp();
                if (! $opt_t) {
		  print "INFO: Attempting to Download '$urls{$streams{$_}}':\n";
		  download_stream_curl( $streams{$_}, "$urls{$streams{$_}}-$episodes{$urls{$streams{$_}}}" );
                }
	} 
}

exit 0;


sub get_links_all {
	my $pageno = 1;
	my $pid;
	my @page;

	print "INFO: Getting Index page.\n";

	# Loop while we still get stream links
	do {
		@page = ();
		print "DEBUG: $curl -A \"$ua{safari}\" \"http://www.bbc.co.uk/iplayer/atoz/?filter=azgroup%3A*&start=${pageno}&scope=iplayeratoz\" 2>/dev/null\n" if $DEBUG;
		print "." if ! $opt_v;
		my @html = `$curl -A "$ua{safari}" "http://www.bbc.co.uk/iplayer/atoz/?filter=azgroup%3A*&start=${pageno}&scope=iplayeratoz" 2>/dev/null`;

		# Get the complete URL
		# e.g.:  <a class="resultlink" href="/iplayer/page/item/b00bwky1.shtml?filter=azgroup%3A%2A&amp;start=33&amp;scope=iplayeratoz&amp;version_pid=b00c3kcd">Wild China</a>
                # Get Episode info: Info follows for upto 40 lines after matched line, e.g.
		#                                       <div class="resultSynopsis">
		#                <p class="title">
		#                        <strong>Stake Out</strong>
		#                        <span class="divider">|</span>
		#                        Episode 7
		#                </p>
		#                <p class="description">Children's hidden camera game show that finds out how well kids know their mates. The Prince of Askabar visits Edinb
		#        </div>

		# parse @html array for episode info
		for (my $i=0; $i<$#html; $i++) {
			my $block;
			# If this is a version_pid line (i.e. one with anchor text in it)
			if ( $html[$i] =~ /version_pid=\w+">[^<]+<\/a>/ ) {
				# Need version_pid & url (note these are different pids)
				# Get url
				my $url = $html[$i];
				my $pid = $html[$i];
				$url =~ s/^.*href=\"(.*\.shtml)\?.*version_pid=\w+">[^<]+<\/a>/$1/g;
				$pid =~ s/^.*href=\".*\.shtml\?.*version_pid=(\w+)">[^<]+<\/a>/$1/g;
				chomp($url);
				chomp($pid);
				# get next 40 lines into a single string
				for (my $j=1; $j<=40; $j++) {
					$block .= $html[$i+$j];
					chomp($block);
				}
				$i += 40;
				my $progdata = $block;
				$progdata =~ s!^.*<p class=\"title\">\s*<strong>(.+)</strong>.+</span>\s*([^<]+)</p>.*<p class=\"description\">([^<]+).*$!$1|$2|$3!g;
                                # Remove unwanted whitespace
				$progdata =~ s/\s*$//g;
                                $progdata =~ s/\s*\|/|/g;
                                $progdata =~ s/\|\s*/|/g;
				print "url|pid|title|episode|desc = '$url|$pid|$progdata'\n" if $opt_v;
				push @page, "$url|$pid|$progdata";
			}
		}


		for (@page) {
			my ($url, $pid, $progname, $episode, $desc) = split /\|/;
			#$url = $url_download_prefix.$url;
			# Get the pid for duplicate detection
			# Duplicate detection
			if ( not defined $pids{$pid} ) {
				$links{"$progname ($pid)"} = $url;
				# Other hashes for categorisation
				# Used to detect duplicates
				$urls{$url} = "$progname ($pid)";
				$pids{$pid} = $pid;
				#$prognames{$pid} = $progname;
				$episodes{"$progname ($pid)"} = $episode;
				$descriptions{"$progname ($pid)"} = $desc;
                                print "  $progname - $episode - $desc\n" if $opt_v;
				# Link Validation here...
			} else {
				print "WARNING: removing duplicate stream link for \"$progname ($episode)\" / $pid\n" if $opt_v;
			}

		}
		# Next page
		$pageno++;
	} while ($#page >= 0);
	print "\n";
}


sub get_links {
	my @cache;

	# Open cache file (need to verify we can even read this)
	if ( open(CACHE, "< $cachefile") ) {
		@cache = <CACHE>;
		close (CACHE);
	}

	# if a cache file doesn't exist/corrupted or original file is older than 2 mins then download new data
	if ( ($cache[0] =~ /^0$/) || (! -f $cachefile) || ($now >= ( stat($cachefile)->mtime + $cache_secs )) ) {

		# Use A-Z,0-9 searchine '*' instead - less pages
		get_links_all();

		# Open cache file for writing
		if ( open(CACHE, "> $cachefile") ) {
			for (sort keys %links) {
				print CACHE "$_|$links{$_}|$episodes{$_}|$descriptions{$_}\n";
			}
			close (CACHE);
			# Make sure anyone can read/write file (security risk here!!)
			`chmod 777 $cachefile`;
		} else {
			print "Couldn't open cache file for writing\n";
		}


	# Else read from cache
	} else {
		for (@cache) {
			# Populate %links from cache
			chomp();
			my ($progname, $url, $episode, $desc) = split /\|/;
                        $links{$progname} = $url;
			$urls{$url} = $progname;
			$episodes{$progname} = $episode;
			$descriptions{$progname} = $desc;
		}
	}

        # Create local web page
	if ( open(HTML, "> $webfile") ) {
	  print HTML '<html><head></head><body><table border=1>';
          for (sort keys %links) {
            # Extract pid from progname
            my $pid = $_;
            $pid =~ s/^.*\((b00.....)\).*$/$1/g;
            my $title = $_;
            $title =~ s/^(.*)\s*\(.*$/$1/g;
            print HTML "<tr>
              <td rowspan=2 width=150><a href=\"${prog_page_prefix}/${pid}.html\"><img height=84 width=150 src=\"http://www.bbc.co.uk/iplayer/images/episode/${pid}_150_84.jpg\"></a></td>
              <td><a href=\"${prog_page_prefix}/${pid}.html\">${title}</a></td> <td>$episodes{$_}</td>
            </tr>
            <tr>
              <td colspan=4>$descriptions{$_}</td>
            </tr>
            \n";
          }
          print HTML '</table></body>';
          close (HTML);
        } else {
	  print "Couldn't open html file $webfile for writing\n";
        }
        
	return 0;
}


# Usage: download_stream_curl (<url>|<filename_prefix>)
sub download_stream_curl {

	my $id = shift;
	$id = $1 if $id =~ /\/(b.*?)\.shtml/;
	my $page = "http://www.bbc.co.uk/iplayer/page/item/$id.shtml";

	my $file = shift;
	# Remove spaces and brackets and change to underscores
	$file =~ s/[\s\\\/\(\)]/_/g if ! $opt_w;
	$file = "${download_dir}/${file}.mov";
	
	if ( -f $file ) {
		print "ERROR: File $file already exists - skipping....\n";
		return 0;
	} else {
		print "Attempting to Download $file from $page\n";
		print ("$curl -b cookies.txt -A '$ua{coremedia}' -H 'Range: bytes=0-' -o '$file' \$( $curl -i -c cookies.txt -A '$ua{coremedia}' -H 'Range: bytes=0-1' \$( $curl -i -A '$ua{safari}' -c cookies.txt $page | grep 'pid       :' | cut -d\\' -f2 | sed 's/\\([0-9a-z]\\)/http:\\/\\/www.bbc.co.uk\\/mediaselector\\/3\\/auth\\/iplayer_streaming_http_mp4\\/\\1/' ) | grep Location | cut -d: -f2,3 )") if $DEBUG;
		my $ret = system("$curl -b cookies.txt -A '$ua{coremedia}' -H 'Range: bytes=0-' -o '$file' \$( $curl -i -c cookies.txt -A '$ua{coremedia}' -H 'Range: bytes=0-1' \$( $curl -i -A '$ua{safari}' -c cookies.txt $page | grep 'pid       :' | cut -d\\' -f2 | sed 's/\\([0-9a-z]\\)/http:\\/\\/www.bbc.co.uk\\/mediaselector\\/3\\/auth\\/iplayer_streaming_http_mp4\\/\\1/' ) | grep Location | cut -d: -f2,3 )");
		if ($ret) {
			print "ERROR: Failed to Download $file from $page. Skipping...\n";
			return 1;
		}
	}
	# XOR Decode if required
	iplayer_decoder($file) if ! $opt_n;

	return 0;
}


# In-place modification of an iplayer file to do that dodgy xor stuff
#
# Usage: iplayer_decode <filename>
#
sub iplayer_decoder {
  chomp( my $file = shift );
  my $length =  stat($file)->size;
  print "$file length = $length\n";

  open (FILE, "+<$file") || die "can't update $file: $!";

  my $buffer;

  # Use preferred blocksize
  my $recsize = stat($file)->blksize;

  # Create long string of '0x3c53's
  my $xor = create_xor_string($recsize/2, 0x3c, 0x53);

  # Offsets
  my $start_offset = 0x2800;
  my $end_offset = 0x400 + 2;

  # Put file ptr in correct place
  seek(FILE, $start_offset, SEEK_SET);

  print "INFO: Only XORing $recsize bytes from $start_offset\n";

  # Do the xoring
  for (my $i = $start_offset; $i < ($length - $end_offset); $i += $recsize) {

	# Make sure we don't touch last 0x402 bytes
	if ( $i > ($length - $end_offset - $recsize) ) {
		$recsize = $length - $end_offset - $i;
		$xor = create_xor_string($recsize/2, 0x3c, 0x53);
		print "\nINFO: Only XORing $recsize bytes from $i\n";
	}

	read(FILE, $buffer, $recsize) == $recsize
		|| die "\nReading: $!";

	# Do the XOR
	$buffer = $buffer ^ $xor;

	# Rewind $buffer bytes then rewrite xor'ed data
	seek(FILE, -1 * $recsize, SEEK_CUR);
	print FILE $buffer;

	printf "\r%0.2f%%", $i/$length*100.0;
	printf "\r%0.2f%%, offset = %X, blksize = %d bytes, (length = %X, start = %X, end = %X)", $i/$length*100.0, $i, $recsize, $length, $start_offset, $length - $end_offset if $opt_v;
  }

  # Last two bytes (length-0x402)->(length-0x401) have xor pattern swapped
  my $xor = create_xor_string(1, 0x53, 0x3c);
  print "\nINFO: XORing 2 bytes from ".($length - $end_offset)."\n";
  seek(FILE, $length - $end_offset, SEEK_SET);
  read(FILE, $buffer, 2) == 2 || die "Reading: $!";

  # Do the XOR using 0x53,0x3c
  $buffer = $buffer ^ $xor;

  # Rewind $buffer bytes then rewrite xor'ed data
  seek(FILE, -2, SEEK_CUR);
  print FILE $buffer;

  close FILE || die "Closing: $!";
}


# Build XOR pattern (there has gotta be a more efficient way of doing this)
sub create_xor_string {
	my $count = shift;

	my $pattern;
	$pattern .= chr($_) for @_;

	my $ret;
	for (my $i = 0; $i<$count; $i++) { 
		$ret .= $pattern;
	}
	return $ret; 
}
