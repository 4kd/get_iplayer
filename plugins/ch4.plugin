################### ch4 class #################
package Programme::ch4;

use Env qw[@PATH];
use Fcntl;
use File::Copy;
use File::Path;
use File::stat;
use HTML::Entities;
use HTTP::Cookies;
use HTTP::Headers;
use IO::Seekable;
use IO::Socket;
use LWP::ConnCache;
use LWP::UserAgent;
use POSIX qw(mkfifo);
use strict;
use Time::Local;
use URI;

# Inherit from Programme class
use base 'Programme';

# Class vars
# Global options
my $opt;


# Constructor
# Usage: $prog{$pid} = Programme->new( 'pid' => $pid, 'name' => $name, <and so on> );
sub new {
	my $type = shift;
	my %params = @_;
	my $self = {};
	for (keys %params) {
		$self->{$_} = $params{$_};
	}
	## Ensure that all instances reference the same class global $optref var
	# $self->{optref} = $Programme::optref;
	# Ensure the subclass $opt var is pointing to the Superclass global optref
	$opt = $Programme::optref;
	bless $self, $type;
}


sub index_min { return 40001 }
sub index_max { return 49999 }
sub channels {
	return {
	};
}


# Class cmdline Options
sub opt_format {
	return {
		outputch4	=> [ 1, "outputch4=s", 'Output', '--outputch4 <dir>', "Download output directory for ch4"],
	};
}


# Method to return optional list_entry format
sub optional_list_entry_format {
	my $prog = shift;
	return ", $prog->{channel}, $prog->{categories}, $prog->{guidance}";
}



# Returns the modes to try for this prog type
sub modelist {
	return 'flashnormal';
}



# Cleans up a pid and removes url parts that might be specified
sub clean_pid {
	my $prog = shift;
	# extract numerical format - remove surrounding url
	$prog->{pid} = $1 if $prog->{pid} =~ m{(\d{2,8})};
}



# get full episode metadata given pid and ua. Uses two different urls to get data
sub get_metadata {
	my $prog = shift;
	my $ua = shift;
	my $metadata;
	my $entry;
	my ($name, $episode, $episodeno, $seriesno, $duration, $available, $channel, $expiry, $longdesc, $versions, $guidance, $prog_type, $categories, $player, $thumbnail);

	# Setup User agent
	my $ua = main::create_ua();
	# Required for ch4
	$ua->default_header(
		'Accept'		=> 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
		'Accept-Language'	=> 'en-gb,en;q=0.5',
		'Accept-Encoding'	=> 'gzip,deflate',
		'Accept-Charset'	=> 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
	);

	main::logger "DEBUG: Getting Metadata for $prog->{pid}:\n" if $opt->{debug};

	# Detailed metadata
	my $prog_metadata_url = 'http://www.channel4.com/services/catchup-availability/asset-info/'; # + <assetno>?<epoch now>
	$entry = main::request_url_retry($ua, "${prog_metadata_url}$prog->{pid}?".time(), 3, '', '');
	decode_entities($entry);
	main::logger "DEBUG: ${prog_metadata_url}$prog->{pid}:\n$entry\n\n" if $opt->{debug};
	# Flatten
	$entry =~ s|[\r\n]||g;
	StringUtils::clean_utf8_and_whitespace($entry);

	#<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
	#<Channel4ServiceResult serviceName="Asset Information Service" status="OK" xmlns:ns2="http://domain.catchup.channel4.com/CatchupAvailability">
	#    <serviceReport returnCode="200">
	#        <description>OK</description>
	#    </serviceReport>
	#    <assetInfo>
	#        <assetId>CH4_08_02_16_47244016001001_001</assetId>
	#        <contractId>47244</contractId>
	#        <brandTitle>Smallville</brandTitle>
	#        <webSafeBrandTitle>smallville</webSafeBrandTitle>
	#        <seriesNumber>8</seriesNumber>
	#        <episodeNumber>16</episodeNumber>
	#        <episodeTitle>Smallville</episodeTitle>
	#        <duration>2385</duration>
	#        <sinceBroadcast>511570</sinceBroadcast>
	#        <location>CH4_08_02_16_47244016001001_001.mp4</location>
	#        <subtitlesFileUri></subtitlesFileUri>
	#        <adverts>
	#            <targetingUri>http://realmedia.channel4.com/RealMedia/ads/adstream_sx.ads/channel4.newcu/channel4/channel4/c4drama/47244/47244/016/1956465544</targetingUri>
	#            <breaks>
	#                <break>
	#                    <breakOffset>0</breakOffset>
	#                    <resumeOffset>0</resumeOffset>
	#                    <data>PRE:x60,x61,x90,x91</data>
	#                </break>
	#                <break>
	#                    <breakOffset>1330020</breakOffset>
	#                    <resumeOffset>1330020</resumeOffset>
	#                    <data>CEN:x92,x80,x81,x93</data>
	#                </break>
	#            </breaks>
	#            <parameters></parameters>
	#        </adverts>
	#        <uriData>
	#            <streamUri>rtmpe://securestream.channel4.com/4oD/mp4:assets/CH4_08_02_16_47244016001001_001</streamUri>
	#            <token>da_b6b5cVaVcPc3dSdqb6abdUavdPaRb8cx-bj9GTZ-eS-lyT-r7rwk9pIowp8svlGqtlFlnn6ksn8sfrtrnrVlfphoqp7sblGq7lyl5nKk5nIr7rgrbqgl8pIoeqGsblG</token>
	#            <fingerprint>v002</fingerprint>
	#            <slist>assets/CH4_08_02_16_47244016001001_001</slist>
	#        </uriData>
	#    </assetInfo>
	#</Channel4ServiceResult>

	$name = $1 if $entry =~ m{<brandTitle>(.+?)</brandTitle>};

	# episode
	$episode = $1 if $entry =~ m{<episodeTitle>(.+?)</episodeTitle>};
	$seriesno = $1 if $entry =~ m{<seriesNumber>(.+?)</seriesNumber>};
	$episodeno = $1 if $entry =~ m{<episodeNumber>(.+?)</episodeNumber>};
	$episode = '' if $episode eq $name;
	$episode .= sprintf('s%02de%02d', $seriesno, $episodeno ) if $seriesno && $episodeno;

	$duration = $1 if $entry =~ m{<duration>(.+?)</duration>};
	#$ = $1 if $entry =~ m{<>(.+?)</>};
	#$ = $1 if $entry =~ m{<>(.+?)</>};
	#$ = $1 if $entry =~ m{<>(.+?)</>};

	#$expiry = $1 if $entry =~ m{<dcterms:valid>\s*start=.+?;\s*end=(.*?);};
	#$guidance = $1 if $entry =~ m{ITV Video Guidance<\/strong><p>\s*(.+?)[\W\s]*<\/p>};
	#$player = $1 if $entry =~ m{<media:player\s*url=\"(.*?)\"\s*\/>};
	#$thumbnail = $1 if $entry =~ m{<div id="cu-2-0-ItemMediaUrl">(.+?)</div>};

	# Fill in from cache if not got from metadata
	$prog->{name} 		= $name || $prog->{name};
	$prog->{episode} 	= $episode || $prog->{episode};
	$prog->{type}		= $prog->{type};
	$prog->{duration}	= $duration || $prog->{duration};
	$prog->{channel}	= $channel || $prog->{channel};
	$prog->{available}	= $available || $prog->{available};
	$prog->{expiry}		= $expiry || $prog->{expiry};
	$prog->{versions}	= $versions || $prog->{versions};
	$prog->{guidance}	= $guidance || $prog->{guidance};
	$prog->{categories}	= $categories || $prog->{categories};
	$prog->{desc}		= $longdesc || $prog->{desc};
	$prog->{player}		= $player;
	$prog->{thumbnail}	= $thumbnail || $prog->{thumbnail};
	# just use the default modelist
	$prog->{modes}		= 'default: '.$prog->modelist();
	return 0;
}



# Usage: Programme::tv->get_links( \%prog, 'ch4' );
# Uses: %{ channels() }, \%prog
sub get_links {
	shift; # ignore obj ref
	my $progref = shift;
	my $prog_type = shift;
	# Hack to get correct 'channels' method because this methods is being shared with Programme::radio
	my %channels = %{ main::progclass($prog_type)->channels() };

	# page scraping here
	# GET http://www.channel4.com/programmes/catch-up/ | grep -P 'href="\/programmes\/.+?\/catch-up\">'

	my $xml;
	my $feed_data;
	my $res;
	main::logger "INFO: Getting $prog_type Programmes List\n";

	# Setup User agent
	my $ua = main::create_ua();
	$ua->default_header(
		'Accept'		=> 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
		'Accept-Language'	=> 'en-gb,en;q=0.5',
		'Accept-Encoding'	=> 'gzip,deflate',
		'Accept-Charset'	=> 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
		'Pragma'		=> 'no-cache',
		'Cache-Control'		=> 'no-cache',
	);
	my $baseurl = 'http://www.channel4.com';

	my $url = $baseurl.'/programmes/catch-up';
	$xml = main::request_url_retry($ua, $url, 3, '.', "WARNING: Failed to get series list from from channel4 site\n");

	# Hash of <name> => <uri>;
	my %names;
	# <li><a href="/programmes/time-team/catch-up">Time Team</a></li>
	while ( $xml =~ m{<li><a href="(/programmes/.+?/catch-up)">(.+?)</a></li>}sg ) {
		$names{$2} = $1;
		main::logger "DEBUG: Series '$2', URI: $1\n" if $opt->{debug};
	}

	# Download index feed
	# Sort feeds so that category based feeds are done last - this makes sure that the channels get defined correctly if there are dups
	for my $name ( keys %names ) {

		my $url = $baseurl.$names{$name};
		# Setup User agent
		my $ua = main::create_ua();
		# Required for ch4
		$ua->default_header(
			'Accept'		=> 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
			'Accept-Language'	=> 'en-gb,en;q=0.5',
			'Accept-Encoding'	=> 'gzip,deflate',
			'Accept-Charset'	=> 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
			'Pragma'		=> 'no-cache',
			'Cache-Control'		=> 'no-cache',
			'Referer'		=> $baseurl.'/programmes/catch-up',
		);
	
		main::logger "DEBUG: Getting Episodes for $name\n" if $opt->{verbose};
		$xml = main::request_url_retry($ua, $url, 3, '.', "WARNING: Failed to get programme index feed for $_ from 4oD site\n");
		decode_entities($xml);
		StringUtils::clean_utf8_and_whitespace($xml);
		#<tr>
		#        <td class="broadcastDetails">
		#                <ul>
		#                        <li>Thursday</li>
		#                        <li>05 February 2009</li>
		#                        <li><span class="broadCastTime">7:59 PM</span></li>
		#                        <li><span class="channel">Channel 4</span></li>
		#                </ul>
		#        </td>
		#        <td>
		#                <div class="episodeDetails">
		#                        <h3>
		#                                <span class="episodeNumber">Series 6 Episode 1</span>
		#                                <span class="episodeTitle">Kathleen and Mary</span>
		#                        </h3>
		#                        <p>Cleaning company manager Mary Gibson has the body of a 30-something
		#                           but her face tells a very different story. A lifetime of sunbeds and
		#                           smoking have piled on the years, leaving Mary with no choice&hellip;</p>
		#                        <p class="guidance">Contains scenes of surgery</p>
		#                        <ul class="jumpPoints lgIcn">
		#                                <li><a href="/programmes/10-years-younger/episode-guide/series-6/episode-1" class="episodesLink">Episode Guide</a></li>
		#                        </ul>
		#                </div>
		#        </td>
		#        <td>
		#                5 days left
		#        </td>
		#        <td>
		#                <a class="playLink hide" href="#2870776"><span>Play</span></a>
		#                <span class="playingLabel hide">Now</span>
		#                <span class="playingLabel hide">Playing</span>
		#                <!-- Image for this video clip when it's not playing -->
		#                <input type="hidden" value="/assets/programmes/images/10-years-younger/series-6/episode-1/10-years-younger-s6e1_625x352.jpg"/>
		#        </td>
		#</tr>

		# Parse XML

		# get list of entries within <entry> </entry> tags
		my @entries = split /broadcastDetails/, $xml;
		# Discard first element == header
		shift @entries;

		main::logger "INFO: Got ".($#entries + 1)." episodes\n" if $opt->{verbose};

		foreach my $entry (@entries) {
			my ( $episode, $desc, $pid, $available, $expiry, $channel, $duration, $thumbnail, $versions, $guidance );

			$entry =~ s/[\r\n]/ /g;
			$entry =~ s/\s+/ /g;

			#main::logger "DEBUG: Entry = $entry\n" if $opt->{debug};

			# <a class="playLink hide" href="#2870776"><span>Play</span></a>
			$pid = $1 if $entry =~ m{<a\s+class="playLink hide"\s+href="#(\d+)"><span>Play</span></a>}i;

			# Date broadcast
			# <td class="broadcastDetails"> <ul> <li>Sunday</li> <li>26 April 2009</li> <li> <span class="broadCastTime">10:00 AM</span> </li>
			$available = "$1 $2" if $entry =~ m{>\s*<ul>\s*<li>.+?</li>\s*<li>(.+?)</li>\s*<li>\s*<span class="broadCastTime">(.+?)</span>}i;

			#<td> 5 days left </td>
			#$expiry = $1 if $entry =~ m{<td>\s*(\d+\s+\w+\s+left)\s*</td>}i;

			# parse episode and s??e??
			$episode = $1 if $entry =~ m{<span\s+class=\"episodeTitle\">\s*(.*?)\s*<\/span>}i;
			$episode = '' if $episode eq $name;
			$episode .= sprintf( ' s%02de%02d', $1, $2 ) if $entry =~ m{<span\s+class="episodeNumber">\s*Series\s+(\d+)\s+Episode\s+(\d+)\s*</span>}i;
			$episode .= " $1" if $entry =~ m{<span\s+class="episodeNumber">\s*(Series\s+\d+)\s*</span>}i;
			$episode =~ s/(^\s+|\s+$)//g;
			$episode = $available if not $episode;

			# <div class="episodeDetails"> .... <p> description </p>....<a class="playLink hide"
			$desc = $1 if $entry =~ m{<div\s+class="episodeDetails">.+?<p>(.*?)</p>};
			$desc = '' if $desc =~ /<span/i;
			# Remove unwanted html tags and extra whitespace
			$desc =~ s!</?(br|b|i|p|strong)\s*/?>!!gi;
			$desc =~ s/\s+/ /g;

			# <span class="channel">Channel 4</span>
			$channel =  $1 if $entry =~ m{<span\s+class="channel">\s*(.+?)\s*</span>}i;

			# This is not the availability!
			# <updated>2008-06-22T05:01:49Z</updated>
			#$available = Programme::get_available_time_string( $1 ) if $entry =~ m{<updated>(\d{4}\-\d\d\-\d\dT\d\d:\d\d:\d\d.).*?</updated>};

			# Merge and Skip if this pid is a duplicate
			if ( defined $progref->{$pid} ) {
				main::logger "WARNING: '$pid, $progref->{$pid}->{name} - $progref->{$pid}->{episode}, $progref->{$pid}->{channel}' already exists (this channel = $channel)\n" if $opt->{verbose};
				next;
			}

			# Set guidance based on category
			# <p class="guidance">Contains scenes of surgery</p>
			$guidance = $1 if $entry =~ m{<p\s+class="guidance">(.+?)</p>};

			# Thumbnail
			$thumbnail = $1 if $entry =~ m{<input\s+type="hidden"\s+value="(/assets/programmes/images/.+?.jpg)"/>};
			# use a smaller size
			$thumbnail =~ s/625x352/145x82/g;

			main::logger "DEBUG: pid='$pid',name='$name', episode='$episode', channel='$channel', url='${url}'\n" if $opt->{debug};

			# build data structure
			$progref->{$pid} = main::progclass($prog_type)->new(
				'pid'		=> $pid,
				'name'		=> $name,
				'versions'	=> 'default',
				'episode'	=> $episode,
				'desc'		=> $desc,
				'guidance'	=> $guidance,
				'available'	=> $available,
				#'expiry'	=> $expiry,
				'duration'	=> 'Unknown',
				'thumbnail'	=> $baseurl.$thumbnail,
				'channel'	=> $channel,
				'categories'	=> 'tv',
				'type'		=> $prog_type,
				'web'		=> "${url}#${pid}",
			);
		}
	}
	main::logger "\n";
	return 0;
}



sub download {
	my ( $prog, $ua, $mode, $version, $version_pid ) = ( @_ );
	my %streamdata;

	# if subsonly required then skip
	return 'skip' if $opt->{subsonly};

	# if rtmpdump does not exist
	if ( $mode =~ /^(rtmp|flash)/ && ! main::exists_in_path('rtmpdump')) {
		main::logger "WARNING: Required program rtmpdump does not exist (see http://linuxcentre.net/getiplayer/installation and http://linuxcentre.net/getiplayer/download)\n";
		return 'next';
	}
	# Force raw mode if ffmpeg is not installed
	if ( $mode =~ /^(flash|rtmp)/ && ! main::exists_in_path('ffmpeg')) {
		main::logger "\nWARNING: ffmpeg does not exist - not converting flv file\n";
		$opt->{raw} = 1;
	}

	%streamdata = %{ $prog->get_stream_data( undef, 'flashnormal') };

	# Get extension from streamdata if defined and raw not specified
	$prog->{ext} = $prog->{streams}->{$version}->{$mode}->{ext};
	$prog->{ext} = 'flv' if $opt->{raw};
	
	my $url = $prog->{streams}->{$version}->{$mode}->{streamurl};

	if ( not $url ) {
		main::logger "WARNING: No programme stream URL was found, skipping\n";
		return 'skip';
	}
	
	# Determine the correct filenames for this download
	return 'skip' if $prog->generate_filenames( $ua, "<name> <episode> <pid>" );

	# Skip from here if we are only testing downloads
	return 'skip' if $opt->{test};

	# Instantiate new streamer from streamdata
	my $class = "Streamer::$prog->{streams}->{$version}->{$mode}->{streamer}";
	my $stream = $class->new;

	# Do the download
	return $stream->get( $ua, $prog->{streams}->{$version}->{$mode}->{streamurl}, $prog, %{ $prog->{streams}->{$version}->{$mode} } );
}



# Generic
# Gets media streams data for this version pid
# $media = undef|flashnormal
sub get_stream_data {
	my ( $prog, undef, $media ) = @_;
	my %data;

	# Setup User agent
	my $ua = main::create_ua();
	# Required for ch4
	$ua->default_header(
		'Accept'		=> 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
		'Accept-Language'	=> 'en-gb,en;q=0.5',
		'Accept-Encoding'	=> 'gzip,deflate',
		'Accept-Charset'	=> 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
	);

	$opt->{quiet} = 0 if $opt->{streaminfo};

	# Detailed metadata
	my $prog_metadata_url = 'http://www.channel4.com/services/catchup-availability/asset-info/'; # + <assetno>?<epoch now>
	my $entry = main::request_url_retry($ua, "${prog_metadata_url}$prog->{pid}?".time(), 3, '', '');
	decode_entities($entry);
	main::logger "DEBUG: ${prog_metadata_url}$prog->{pid}:\n$entry\n\n" if $opt->{debug};
	# Flatten
	$entry =~ s|[\r\n]||g;

	my ( $stremuri, $token, $fingerprint, $slist );
	#        <subtitlesFileUri></subtitlesFileUri>
	#        <uriData>
	#            <streamUri>rtmpe://securestream.channel4.com/4oD/mp4:assets/CH4_08_02_16_47244016001001_001</streamUri>
	#            <token>da_b6b5cVaVcPc3dSdqb6abdUavdPaRb8cx-bj9GTZ-eS-lyT-r7rwk9pIowp8svlGqtlFlnn6ksn8sfrtrnrVlfphoqp7sblGq7lyl5nKk5nIr7rgrbqgl8pIoeqGsblG</token>
	#            <fingerprint>v002</fingerprint>
	#            <slist>assets/CH4_08_02_16_47244016001001_001</slist>
	#        </uriData>

	$stremuri = $1 if $entry =~ m{<streamUri>(.+?)</streamUri>};
	$token = $1 if $entry =~ m{<token>(.+?)</token>};
	$fingerprint = $1 if $entry =~ m{<fingerprint>(.+?)</fingerprint>};
	$slist = $1 if $entry =~ m{<slist>(.+?)</slist>};

	# streams
	my $mode = 'flashnormal';
	$data{$mode}{ext} = 'mp4';
	$data{$mode}{streamer} = 'rtmp';
	$data{$mode}{server} = $1 if $stremuri =~ m{rtmpe://(.+?)/};
	$data{$mode}{identifier} = $1 if $stremuri =~ m{rtmpe://.+?/(.+)$};
	$data{$mode}{authstring} = $token;
	$data{$mode}{type} = 'Flash RTMPE h264 stream';
	$data{$mode}{playpath} = "$data{$mode}{identifier}";
	$data{$mode}{playpath} =~ s|^4oD/||i;
	$data{$mode}{streamurl} = $stremuri;
	$data{$mode}{identifier} =~ s|^4oD/mp4:||;
	$data{$mode}{application} = "ondemand?_fcs_vhost=$data{$mode}{server}&auth=$data{$mode}{authstring}&aifp=${fingerprint}&slist=$data{$mode}{identifier}";
	$data{$mode}{tcurl} = "rtmpe://$data{$mode}{server}:1935/$data{$mode}{application}";
	$data{$mode}{swfurl} = 'http://www.channel4.com/static/programmes/asset/flash/swf/4odplayer-3.14.1.swf';
	$data{$mode}{protocol} = 3;
	$data{$mode}{extraopts} = '--swfsize 668128 --swfhash c103ab360cd0164b7d0611b4e8c738ffb7c4b6bcc8b94f11e13225421d2ab969';
	main::logger "DEBUG: Found $mode: $data{$mode}{type}\n" if $opt->{debug};

	# Return a hash with media => url if '' is specified - otherwise just the specified url
	if ( ! $media ) {
		return %data;
	} else {
		# Make sure this hash exists before we pass it back...
		$data{$media}{exists} = 0 if not defined $data{$media};
		return $data{$media};
	}
}

1;
